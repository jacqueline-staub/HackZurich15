package com.phonewars;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.ExecutionException;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.AsyncTask;
import android.widget.Toast;

public class MyHttpConnection {

	public static JSONObject get(Context c, String url) {
		JSONObject result = null;
		try {
			result = new AsyncTask<String, Void, JSONObject>() {
				@Override
				protected void onPreExecute() {
					super.onPreExecute();
				}

				@Override
				protected void onPostExecute(JSONObject result) {
					super.onPostExecute(result);
				}

				@Override
				protected JSONObject doInBackground(String... params) {
					JSONObject response = null;
					try {
						JSONObject request = new JSONObject();
						response = MyHttpConnection.doGet(params[0]);
					} catch (Exception e) {
						e.printStackTrace();
					}
					return response;
				}

			}.execute(url).get();


			if(result != null && result.getInt("ErrorCode") !=0){
				Toast.makeText(c, "GET ERROR: " + result.getString("ErrorMesssage"),
						Toast.LENGTH_SHORT).show();
				return null;
			}
			return result;

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	public static JSONObject post(Context c, JSONObject request, String url){
		
		final String url2 = url;
		JSONObject result;
		try {
			result = new AsyncTask<JSONObject, Void, JSONObject>() {
				@Override
				protected void onPreExecute() {
					super.onPreExecute();
				}
				@Override
				protected void onPostExecute(JSONObject result) {
					super.onPostExecute(result);
				}
				@Override
				protected JSONObject doInBackground(JSONObject... params) {
					JSONObject response = null;
					try{
						response = MyHttpConnection.doPost(url2, params[0]);
					}catch(Exception e){
						e.printStackTrace();
					}
					return response;
				}

			}.execute(request).get();
		
		
		if(result != null && result.getInt("ErrorCode") != 0){
			Toast.makeText(c, "Error: "+result.getString("ErrorMessage"), Toast.LENGTH_SHORT).show();
			return null;
		}
		return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	private static  JSONObject doPost(String url, JSONObject content) throws ClientProtocolException, IOException, JSONException {
		HttpClient client = new DefaultHttpClient();
		HttpPost post = new HttpPost(url);
		StringEntity input = new StringEntity(content.toString());
		input.setContentType("application/json");
		post.setEntity(input);
		HttpResponse response = client.execute(post);
		BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		String allLines = "";
		String line;
		while ((line = rd.readLine()) != null) {
			allLines += line;
		}
		return new JSONObject(allLines);
	}

	private static JSONObject doGet(String url) throws ClientProtocolException, IOException, JSONException {
		HttpClient client = new DefaultHttpClient();
		HttpGet get = new HttpGet(url);
		HttpResponse response = client.execute(get);
		BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		String allLines = "";
		String line;
		while ((line = rd.readLine()) != null) {
			allLines += line;
		}
		return new JSONObject(allLines);
	}

}
